from collections import defaultdict
from itertools import product

cartan = [[2,0,-1,0,0,0],[0,2,0,-1,0,0],[-1,0,2,-1,0,0],[0,-1,-1,2,-1,0],[0,0,0,-1,2,-1],[0,0,0,0,-1,2]]
std_dual = {1:defaultdict(int,{1:2,11:13,14:16,17:18,19:20,21:23}),2:defaultdict(int,{4:5,6:7,8:10,19:21,20:23,22:24}),3:defaultdict(int,{2:3,9:11,12:14,15:17,20:22,23:24}),4:defaultdict(int,{3:4,7:9,10:12,17:19,18:20,24:25}),5:defaultdict(int,{4:6,5:7,12:15,14:17,16:18,25:26}),6:defaultdict(int,{6:8,7:10,9:12,11:14,13:16,26:27})}

"""
weights = {1:(1,0,0,0,0,0)}
data = []

for i in range(1,28):
    for j in range(1,7):
        next_elt = std_dual[j][i]
        if next_elt != 0: #simple transposition j acts nontrivially on i
            next_weight = [a-b for (a,b) in zip(weights[i],cartan[j-1])]
            weights[next_elt]=next_weight
            data.append((next_elt, next_weight))

print(weights)
print(data)
"""

weights = {1: (1, 0, 0, 0, 0, 0), 2: [-1, 0, 1, 0, 0, 0], 3: [0, 0, -1, 1, 0, 0], 4: [0, 1, 0, -1, 1, 0], 5: [0, -1, 0, 0, 1, 0], 6: [0, 1, 0, 0, -1, 1], 7: [0, -1, 0, 1, -1, 1], 8: [0, 1, 0, 0, 0, -1], 9: [0, 0, 1, -1, 0, 1], 10: [0, -1, 0, 1, 0, -1], 11: [1, 0, -1, 0, 0, 1], 12: [0, 0, 1, -1, 1, -1], 13: [-1, 0, 0, 0, 0, 1], 14: [1, 0, -1, 0, 1, -1], 15: [0, 0, 1, 0, -1, 0], 16: [-1, 0, 0, 0, 1, -1], 17: [1, 0, -1, 1, -1, 0], 18: [-1, 0, 0, 1, -1, 0], 19: [1, 1, 0, -1, 0, 0], 20: [-1, 1, 1, -1, 0, 0], 21: [1, -1, 0, 0, 0, 0], 23: [-1, -1, 1, 0, 0, 0], 22: [0, 1, -1, 0, 0, 0], 24: [0, -1, -1, 1, 0, 0], 25: [0, 0, 0, -1, 1, 0], 26: [0, 0, 0, 0, -1, 1], 27: [0, 0, 0, 0, 0, -1]}

"""
steps = {}

for i in range(1,28):
    target = [a-b for (a,b) in zip((1,0,0,0,0,0),weights[i])] 
    steps[i] = [a for a in ((matrix(cartan).inverse()*matrix(target).transpose()).transpose())[0]] 

print(steps)
"""

steps = {1: [0, 0, 0, 0, 0, 0], 2: [1, 0, 0, 0, 0, 0], 3: [1, 0, 1, 0, 0, 0], 4: [1, 0, 1, 1, 0, 0], 5: [1, 1, 1, 1, 0, 0], 6: [1, 0, 1, 1, 1, 0], 7: [1, 1, 1, 1, 1, 0], 8: [1, 0, 1, 1, 1, 1], 9: [1, 1, 1, 2, 1, 0], 10: [1, 1, 1, 1, 1, 1], 11: [1, 1, 2, 2, 1, 0], 12: [1, 1, 1, 2, 1, 1], 13: [2, 1, 2, 2, 1, 0], 14: [1, 1, 2, 2, 1, 1], 15: [1, 1, 1, 2, 2, 1], 16: [2, 1, 2, 2, 1, 1], 17: [1, 1, 2, 2, 2, 1], 18: [2, 1, 2, 2, 2, 1], 19: [1, 1, 2, 3, 2, 1], 20: [2, 1, 2, 3, 2, 1], 21: [1, 2, 2, 3, 2, 1], 22: [2, 1, 3, 3, 2, 1], 23: [2, 2, 2, 3, 2, 1], 24: [2, 2, 3, 3, 2, 1], 25: [2, 2, 3, 4, 2, 1], 26: [2, 2, 3, 4, 3, 1], 27: [2, 2, 3, 4, 3, 2]}

#27,7
replace_dict = {"p_1*":"p_0*","p_2*":"p_1*","p_3*":"p_2*","p_4*":"p_3*","p_5*":"p_4'*","p_6*":"p_4''*","p_7*":"p_5'*","p_8*":"p_5''*","p_9*":"p_6'*","p_10":"p_6''","p_11":"p_7'","p_12":"p_7''","p_13":"p_8","p_14":"p_8'","p_15":"p_8''","p_16":"p_9'","p_17":"p_9''","p_18":"p_{10}'","p_19":"p_{10}''","p_20":"p_{11}'","p_21":"p_{11}''","p_22":"p_{12}'","p_23":"p_{12}''","p_24":"p_{13}","p_25":"p_{14}","p_26":"p_{15}","p_27":"p_{16}"}

plucker = []
temp = [a+b for (a,b) in zip(steps[27],steps[7])]
#for i in range(1,28):
for j,k in product(steps.items(),steps.items()):
    if [a+b for (a,b) in zip(j[1],k[1])]==temp and j[0]<=k[0]:
        plucker.append('p_%s*p_%s' % (j[0],k[0]))
    #if len(pluckers[i])==1:
        #pluckers.pop(i)
mystr = '+'.join(plucker)
print(mystr)
for rep in replace_dict.items():
    mystr = mystr.replace(rep[0],rep[1])
print(mystr)    


#p_7*p_27-p_10*p_26+p_15*p_24-p_17*p_23+p_18*p_21
#"p_5'*p_{16}+p_6''*p_{15}+p_8''*p_{13}+p_9''*p_{12}''+p_{10}'*p_{11}''"

""",0 : 1,1 : 2,2 : 3,3 : 4,4' : 5,4'' : 6,5' : 7,5'' : 8,6' : 9,6'' : 10,7' : 11,7'' : 12,8 : 13,8' : 14,8'' : 15,9' : 16,9'' : 17,10' : 18,10'' : 19,11' : 20,11'' : 21,12' : 22 ,12'' : 23,13 : 24,14 : 25,15 : 26,16 : 27,""",
